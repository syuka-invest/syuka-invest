// /backend/Jenkinsfile

pipeline {
    agent any

    // --- 빌드 파라미터 정의 (수동 강제 빌드 옵션) ---
    parameters {
        booleanParam(name: 'FORCE_BUILD', defaultValue: false, description: '백엔드 변경사항이 없어도 강제로 빌드를 실행하려면 체크하세요.')
    }

    // --- 환경 변수 설정 ---
    environment {
        DOCKER_HUB_CREDENTIALS_ID = 'syuka-invest-backend-dockerhub' 
        DOCKER_IMAGE_NAME = 'blueconecell/syukainvest-backend'
    }

    stages {
        // --- 1. Gradle 빌드 ---
        stage('Gradle Build') {
            // when: 'backend/Syuka-invest/' 폴더에 변경이 있거나, FORCE_BUILD가 체크되었을 때만 실행
            when {
                anyOf {
                    changeset "backend/Syuka-invest/**"
                    expression { params.FORCE_BUILD == true }
                }
            }
            steps {
                dir('Syuka-invest') {
                    echo 'Gradle 빌드를 시작합니다.'
                    sh 'chmod +x gradlew'
                    sh './gradlew build'
                }
            }
        }

        // --- 2. Docker 이미지 빌드 및 푸시 ---
        stage('Build and Push Docker Image') {
            when {
                anyOf {
                    changeset "backend/Syuka-invest/**"
                    expression { params.FORCE_BUILD == true }
                }
            }
            steps {
                dir('Syuka-invest') {
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        script {
                            echo "Docker 이미지를 빌드하고 푸시합니다."
                            def imageTag = "${env.BUILD_NUMBER}"
                            
                            sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                            sh "docker build -t ${DOCKER_IMAGE_NAME}:${imageTag} ."
                            sh "docker tag ${DOCKER_IMAGE_NAME}:${imageTag} ${DOCKER_IMAGE_NAME}:latest"
                            sh "docker push ${DOCKER_IMAGE_NAME}:${imageTag}"
                            sh "docker push ${DOCKER_IMAGE_NAME}:latest"
                        }
                    }
                }
            }
        }

        // --- 3. Docker Compose로 배포 ---
        stage('Deploy') {
            when {
                anyOf {
                    changeset "backend/Syuka-invest/**"
                    expression { params.FORCE_BUILD == true }
                }
            }
            steps {
                dir('Syuka-invest') {
                    echo 'Docker Compose로 배포를 시작합니다.'
                    sh "docker-compose -f docker-compose-infra.yml -f docker-compose-backend.yml pull backend"
                    sh "docker-compose -f docker-compose-infra.yml -f docker-compose-backend.yml up -d"
                }
            }
        }
    }

    // --- 빌드 후 정리 작업 ---
    post {
        always {
            echo '파이프라인이 종료되었습니다. Docker 로그아웃을 실행합니다.'
            sh 'docker logout'
        }
    }
}